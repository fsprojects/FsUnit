[{"uri":"https://fsprojects.github.io/FsUnitExpecto.html","title":"Expecto\r\n","content":"(*** hide ***)\n#r \u0022nuget: Expecto\u0022\n\n(**\nExpecto\n========================\n\n\u003Cdiv class=\u0022row\u0022\u003E\n  \u003Cdiv class=\u0022span1\u0022\u003E\u003C/div\u003E\n  \u003Cdiv class=\u0022span6\u0022\u003E\n    \u003Cdiv class=\u0022well well-small\u0022 id=\u0022nuget\u0022\u003E\n      The Expecto library can be \u003Ca href=\u0022https://nuget.org/packages/Expecto\u0022\u003Einstalled from NuGet\u003C/a\u003E:\n      \u003Cpre\u003EPM\u003E Install-Package Expecto\u003C/pre\u003E\n    \u003C/div\u003E\n  \u003C/div\u003E\n  \u003Cdiv class=\u0022span1\u0022\u003E\u003C/div\u003E\n\u003C/div\u003E\n*)\n\n(**\n**Expecto.Flip** has a similar syntax to \u0060FsUnit\u0060.\n\n\u0060Expecto\u0060 is **not** part of FsUnit.\n\nSyntax\n-------\n\nWith \u0060Expecto.Flip\u0060 you can write your unit tests like this:\n\n*)\n\nopen Expecto.Flip.Expect\n\n(**\nOne object equals or does not equal another:\n*)\n\n1 |\u003E equal \u00221 is equal to 1.\u0022 1\n1 |\u003E notEqual  \u00221 is not equal to 2.\u0022 2\n\n(**\nOne comparable value greater or smaller than another:\n*)\n\n(11, 10) |\u003E isGreaterThan \u002211 is greater than 10.\u0022\n(10, 11) |\u003E isLessThan \u002210 is less than 11.\u0022\n\n(**\n\u0026 more operators:\n*)\n\ntrue |\u003E isTrue \u0022Value is true.\u0022\nfalse |\u003E isFalse \u0022Value is false.\u0022\n\n\u0022\u0022 |\u003E isEmpty\n\u0022Foobar\u0022 |\u003E isNotEmpty \u0022Value is not empty.\u0022\nNone |\u003E isNone \u0022Value is None.\u0022\n\n{1 .. 10} |\u003E contains \u0022Seq 1 to 10 contains 4.\u0022 4\n\n(**\nAll operators are listed here: \u003Ca href=\u0022https://github.com/haf/expecto/blob/main/Expecto/Flip.Expect.fs\u0022\u003EExpecto.Flip.Expect\u003C/a\u003E\n*)"},{"uri":"https://fsprojects.github.io/FsUnitFsUnitTyped.html","title":"What is FsUnitTyped?\r\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#r \u0022../packages/NUnit/lib/netstandard2.0/nunit.framework.dll\u0022\n#r \u0022../bin/FsUnit.NUnit/netstandard2.0/FsUnit.NUnit.dll\u0022\n\n(**\nWhat is FsUnitTyped?\n===============\n\n**FsUnitTyped** is a statically typed set of FsUnit operators that makes\nunit-testing with \u0060FsUnit\u0060 even more safe and enjoyable (available only for \u0060NUnit\u0060 and \u0060xUnit\u0060).\n\nNo more untyped constraints and tests like\n\n    1 |\u003E should equal \u00221\u0022\n\nFsUnitTyped from NuGet\n-----------------------\n\n\u0060FsUnit.Typed\u0060 is part of \u0060FsUnit\u0060 package and can be [installed from NuGet](https://nuget.org/packages/FsUnit).\n\nSyntax\n-------\n\nWith FsUnitTyped, you can write unit tests like this:\n*)\n\nopen FsUnitTyped\n\n(**\nOne object equals or does not equal another:\n*)\n\n1 |\u003E shouldEqual 1\n1 |\u003E shouldNotEqual 2\n\n(**\nOne comparable value greater or smaller than another:\n*)\n\n11 |\u003E shouldBeGreaterThan 10\n10 |\u003E shouldBeSmallerThan 11\n\n\n(**\nA string contains specified substring:\n*)\n\u0022ships\u0022 |\u003E shouldContainText \u0022hip\u0022\n\n(**\nA List, Seq, or Array instance contains, does not contain a value or empty:\n*)\n[1] |\u003E shouldContain 1\n[] |\u003E shouldNotContain 1\n[] |\u003E shouldBeEmpty\n\n(**\nA List or Array instance has a certain length:\n*)\n[|1;2;3;4|] |\u003E shouldHaveLength 4\n\n(**\nA function should throw a certain type of exception:\n*)\n(fun _ -\u003E failwith \u0022BOOM!\u0022) |\u003E shouldFail\u003CSystem.Exception\u003E\n\n(**\nA function should fail\n*)\nshouldFail (fun _ -\u003E 5/0 |\u003E ignore)"},{"uri":"https://fsprojects.github.io/FsUnitindex.html","title":"What is FsUnit?\r\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#r \u0022../packages/NUnit/lib/netstandard2.0/nunit.framework.dll\u0022\n#r \u0022../bin/FsUnit.NUnit/netstandard2.0/FsUnit.NUnit.dll\u0022\n\nopen FsUnit\n\nlet anArray = []\nlet aCollection = System.Collections.Generic.List\u003Cint\u003E()\nlet anObj = obj()\nlet otherObj = obj()\n\n(**\nWhat is FsUnit?\n===============\n\n**FsUnit** is a set of libraries that makes unit-testing with F# more enjoyable. It adds a special syntax to your favorite .NET testing framework.\nFsUnit currently supports NUnit, xUnit, and MsTest.\n\nThe goals of FsUnit are:\n\n* to make unit-testing feel more at home in F# , i.e., more functional.\n* to leverage existing test frameworks while at the same time adapting them to the F# language in new ways.\n\nNuGet packages are available for each of the supported testing frameworks:\n\n* [![NuGet Status](https://buildstats.info/nuget/FsUnit) - NUnit](https://www.nuget.org/packages/FsUnit/)\n* [![NuGet Status](https://buildstats.info/nuget/FsUnit.Xunit) - xUnit](https://www.nuget.org/packages/FsUnit.Xunit/)\n* [![NuGet Status](https://buildstats.info/nuget/Fs30Unit.MsTest) - MsTest](https://www.nuget.org/packages/Fs30Unit.MsTest/)\n\n\nSyntax\n-------\n\nWith FsUnit, you can write unit tests like this:\n*)\n\nopen NUnit.Framework\nopen FsUnit\n\n(**\nOne object equals or does not equal another:\n*)\n\n1 |\u003E should equal 1\n1 |\u003E should not\u0027 (equal 2)\n\n(**\nOne collection is equivalent or is not equivalent to another (order doesn\u0027t matter):\n*)\n\n[2;4;6] |\u003E should equivalent [4;6;2]\n[2;4;6] |\u003E should not\u0027 (equivalent [4;8;2])\n\n\n(**\nOne numeric object equals or does not equal another, with a specified tolerance:\n*)\n10.1 |\u003E should (equalWithin 0.1) 10.11\n10.1 |\u003E should not\u0027 ((equalWithin 0.001) 10.11)\n\n(**\nA string does or does not start with or end with a specified substring:\n*)\n\u0022ships\u0022 |\u003E should startWith \u0022sh\u0022\n\u0022ships\u0022 |\u003E should not\u0027 (startWith \u0022ss\u0022)\n\u0022ships\u0022 |\u003E should endWith \u0022ps\u0022\n\u0022ships\u0022 |\u003E should not\u0027 (endWith \u0022ss\u0022)\n\u0022ships\u0022 |\u003E should haveSubstring \u0022hip\u0022\n\u0022ships\u0022 |\u003E should not\u0027 (haveSubstring \u0022pip\u0022)\n\n(**\nA List, Seq, or Array instance contains or does not contain a value:\n*)\n[1] |\u003E should contain 1\n[] |\u003E should not\u0027 (contain 1)\n\n(**\nA List or Array instance has a certain length:\n*)\nanArray |\u003E should haveLength 4\n\n(**\nA Collection instance has a certain count:\n*)\naCollection |\u003E should haveCount 4\n\n(**\nA function should throw a certain type of exception:\n*)\n(fun () -\u003E failwith \u0022BOOM!\u0022 |\u003E ignore) |\u003E should throw typeof\u003CSystem.Exception\u003E\n(fun () -\u003E failwith \u0022BOOM!\u0022 |\u003E ignore) |\u003E should (throwWithMessage \u0022BOOM!\u0022) typeof\u003CSystem.Exception\u003E\n\n(**\nA function should fail\n*)\nshouldFail (fun () -\u003E 5/0 |\u003E ignore)\n\n(**\nA number of assertions can be created using the \u0060be\u0060 keyword:\n*)\n\ntrue |\u003E should be True\nfalse |\u003E should not\u0027 (be True)\n\n\u0022\u0022 |\u003E should be EmptyString\n\u0022\u0022 |\u003E should be NullOrEmptyString\n\nnull |\u003E should be NullOrEmptyString\nnull |\u003E should be Null\nnull |\u003E should be null\n\nanObj |\u003E should not\u0027 (be Null)\nanObj |\u003E should not\u0027 (be null)\nanObj |\u003E should be (sameAs anObj)\nanObj |\u003E should not\u0027 (be sameAs otherObj)\n\n11 |\u003E should be (greaterThan 10)\n9 |\u003E should not\u0027 (be greaterThan 10)\n11 |\u003E should be (greaterThanOrEqualTo 10)\n9 |\u003E should not\u0027 (be greaterThanOrEqualTo 10)\n10 |\u003E should be (lessThan 11)\n10 |\u003E should not\u0027 (be lessThan 9)\n10.0 |\u003E should be (lessThanOrEqualTo 10.1)\n10 |\u003E should not\u0027 (be lessThanOrEqualTo 9)\n\n0.0 |\u003E should be ofExactType\u003Cfloat\u003E\n1 |\u003E should not\u0027 (be ofExactType\u003Cobj\u003E)\n\n[] |\u003E should be Empty\n[1] |\u003E should not\u0027 (be Empty)\n\n\u0022test\u0022 |\u003E should be instanceOfType\u003Cstring\u003E\n\u0022test\u0022 |\u003E should not\u0027 (be instanceOfType\u003Cint\u003E)\n\n2.0 |\u003E should not\u0027 (be NaN)\n\n[1;2;3] |\u003E should be unique\n\n[1;2;3] |\u003E should be ascending\n[1;3;2] |\u003E should not\u0027 (be ascending)\n[3;2;1] |\u003E should be descending\n[3;1;2] |\u003E should not\u0027 (be descending)\n\n[1..10] |\u003E should be (supersetOf [3;6;9])\n[1..10] |\u003E should not\u0027 (be supersetOf [5;11;21])\n\n[3;6;9] |\u003E should be (subsetOf [1..10])\n[5;11;21] |\u003E should not\u0027 (be subsetOf [1..10])\n\n(**\nThe ofCase operator allows you to check the case of a union.\nSupplying an expression that will result in a non-union type as well as supplying a non-union type as value argument will result in an exception detailing which parameter is wrong. Note that the actual value of the case is NOT checked, e.g. using \u0060\u003C@ MyCase 5 @\u003E\u0060 as expression and \u0060(MyCase 10)\u0060 as parameter will succeed. It is possible to check for more than one case by using a tuple of union cases.\n*)\ntype TestUnion = First | Second of int | Third of string\n\nFirst |\u003E should be (ofCase\u003C@ First @\u003E)\nFirst |\u003E should be (ofCase\u003C@ First, Second @\u003E) // checks if on the cases matches the given case\nSecond 5 |\u003E should be (ofCase\u003C@ Second 10 @\u003E) // note, the actual value is not checked!\nFirst |\u003E should not\u0027 (be ofCase\u003C@ Second 5 @\u003E)\n5 |\u003E should be (ofCase\u003C@ Second 5 @\u003E) // will throw an exception\nSecond 5 |\u003E should be (ofCase\u003C@ int @\u003E) // will throw an exception\n\n(**\n\nTest Projects Targeting Higher F# Runtimes\n------------------------------------------\n\nIf you build your test project with a target F# runtime greater than the targeted runtime of the FsUnit assembly, you may find FsUnit operators failing at runtime, in which case you need to add a binding redirect to the App.config file.\n\n    \u003C?xml version=\u00221.0\u0022 encoding=\u0022utf-8\u0022 ?\u003E\n    \u003Cconfiguration\u003E\n      \u003Cruntime\u003E\n        \u003CassemblyBinding xmlns=\u0022urn:schemas-microsoft-com:asm.v1\u0022\u003E\n          \u003CdependentAssembly\u003E\n            \u003CassemblyIdentity name=\u0022FSharp.Core\u0022 publicKeyToken=\u0022b03f5f7f11d50a3a\u0022 culture=\u0022neutral\u0022 /\u003E\n            \u003CbindingRedirect oldVersion=\u00220.0.0.0-999.999.999.999\u0022 newVersion=\u00224.4.0.0\u0022 /\u003E\n          \u003C/dependentAssembly\u003E\n        \u003C/assemblyBinding\u003E\n      \u003C/runtime\u003E\n    \u003C/configuration\u003E\n\nContributing\n------------\n\nThe project is hosted on [GitHub][gh] where you can [report issues][issues], fork\nthe project and submit pull requests. If you\u0027re adding a new public API, please also\nconsider adding [samples][content] that can be turned into a documentation. You might\nalso want to read the [library design notes][readme] to understand how it works.\n\n  [content]: https://fsprojects.github.io/FsUnit/#Syntax\n  [gh]: https://github.com/fsprojects/FsUnit\n  [issues]: https://github.com/fsprojects/FsUnit/issues\n  [readme]: https://github.com/fsprojects/FsUnit/blob/master/README.md\n*)"},{"uri":"https://fsprojects.github.io/FsUnitMsTest.html","title":"FsUnit for MsTest\r\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#r \u0022../packages/MSTest.TestFramework/lib/netstandard1.0/Microsoft.VisualStudio.TestPlatform.TestFramework.dll\u0022\n#r \u0022../packages/NHamcrest/lib/netstandard1.5/NHamcrest.dll\u0022\n#r \u0022../bin/FsUnit.MsTest/netstandard2.0/FsUnit.MsTest.dll\u0022\n\n(**\nFsUnit for MsTest\n========================\n\n\u003Cdiv class=\u0022row\u0022\u003E\n  \u003Cdiv class=\u0022span1\u0022\u003E\u003C/div\u003E\n  \u003Cdiv class=\u0022span6\u0022\u003E\n    \u003Cdiv class=\u0022well well-small\u0022 id=\u0022nuget\u0022\u003E\n      The FsUnit library for MsTest can be \u003Ca href=\u0022https://www.nuget.org/packages/Fs30Unit.MsTest/\u0022\u003Einstalled from NuGet\u003C/a\u003E:\n      \u003Cpre\u003EPM\u003E Install-Package Fs30Unit.MsTest\u003C/pre\u003E\n      Sample FsUnit tests for MsTest can be \u003Ca href=\u0022https://www.nuget.org/packages/Fs30Unit.MsTest.Sample/\u0022\u003Einstalled from NuGet\u003C/a\u003E:\n      \u003Cpre\u003EPM\u003E Install-Package Fs30Unit.MsTest.Sample\u003C/pre\u003E\n    \u003C/div\u003E\n  \u003C/div\u003E\n  \u003Cdiv class=\u0022span1\u0022\u003E\u003C/div\u003E\n\u003C/div\u003E\n\nEuler - Problem 1\n-----------------\n*)\nmodule \u0060\u0060Project Euler - Problem 1\u0060\u0060 =\n    open Microsoft.VisualStudio.TestTools.UnitTesting\n    open FsUnit.MsTest\n\n    let GetSumOfMultiplesOf3And5 max =\n        seq{3..max-1} |\u003E Seq.fold(fun acc number -\u003E\n                            (if (number % 3 = 0 || number % 5 = 0) then\n                                acc \u002B number else acc)) 0\n\n    [\u003CTestMethod\u003E]\n    let \u0060\u0060When getting sum of multiples of 3 and 5 to a max number of 10 it should return a sum of 23\u0060\u0060 () =\n        GetSumOfMultiplesOf3And5(10) |\u003E should equal 23\n\n(**\nLightBulb\n---------\n*)\nmodule \u0060\u0060LightBulb Tests\u0060\u0060 =\n    open Microsoft.VisualStudio.TestTools.UnitTesting\n    open FsUnit.MsTest\n\n    type LightBulb(state) =\n        member x.On = state\n        override x.ToString() =\n            match x.On with\n            | true  -\u003E \u0022On\u0022\n            | false -\u003E \u0022Off\u0022\n\n    [\u003CTestClass\u003E]\n    type \u0060\u0060Given a LightBulb that has had its state set to true\u0060\u0060 ()=\n        let lightBulb = new LightBulb(true)\n\n        [\u003CTestMethod\u003E] member x.\n         \u0060\u0060when I ask whether it is On it answers true.\u0060\u0060 ()=\n                lightBulb.On |\u003E should be True\n\n        [\u003CTestMethod\u003E] member x.\n         \u0060\u0060when I convert it to a string it becomes \u0022On\u0022.\u0060\u0060 ()=\n                string lightBulb |\u003E should equal \u0022On\u0022\n\n    [\u003CTestClass\u003E]\n    type \u0060\u0060Given a LightBulb that has had its state set to false\u0060\u0060 ()=\n        let lightBulb = new LightBulb(false)\n\n        [\u003CTestMethod\u003E] member x.\n         \u0060\u0060when I ask whether it is On it answers false.\u0060\u0060 ()=\n                lightBulb.On |\u003E should be False\n\n        [\u003CTestMethod\u003E] member x.\n         \u0060\u0060when I convert it to a string it becomes \u0022Off\u0022.\u0060\u0060 ()=\n                string lightBulb |\u003E should equal \u0022Off\u0022\n\n\n(**\nBowlingGame\n---------\nThanks to \u0060Keith Nicholas\u0060 and \u0060Julian\u0060 from hubFS for this example!\n*)\nmodule \u0060\u0060BowlingGame A game of bowling\u0060\u0060 =\n    open Microsoft.VisualStudio.TestTools.UnitTesting\n    open FsUnit.MsTest\n\n    let (|EndOfGame|IncompleteStrike|Strike|Normal|Other|) (l, frame) =\n        match l with\n        | _ when frame = 11            -\u003E EndOfGame(0)\n        | [10;s]                       -\u003E IncompleteStrike(10\u002Bs\u002Bs)\n        | 10::s::n::tail               -\u003E Strike(10\u002Bs\u002Bn, s::n::tail)\n        |  f::s::n::tail when f\u002Bs = 10 -\u003E Normal(f\u002Bs\u002Bn,  n::tail)\n        |  f::s::n::tail               -\u003E Normal(f\u002Bs,    n::tail)\n        | ls                           -\u003E Other(List.fold (\u002B) 0 ls)\n\n    let scoreBowls bowls =\n        let rec scoreBowls\u0027 frame l current_score =\n            let nextframe = scoreBowls\u0027 (frame\u002B1)\n            match (l, frame) with\n            | EndOfGame(score)        -\u003E current_score \u002B score\n            | IncompleteStrike(score) -\u003E current_score \u002B score\n            | Strike(score, l)        -\u003E nextframe l (current_score \u002B score)\n            | Normal(score, l)        -\u003E nextframe l (current_score \u002B score)\n            | Other(score)            -\u003E current_score \u002B score\n        scoreBowls\u0027 1 bowls 0\n\n    [\u003CTestMethod\u003E]\n    let \u0060\u0060with simple scores should get the expected score.\u0060\u0060 () =\n        scoreBowls [1;2;3] |\u003E should equal 6\n\n    [\u003CTestMethod\u003E]\n    let \u0060\u0060with a spare should get the expected score (spare).\u0060\u0060 () =\n        scoreBowls [2;8;1] |\u003E should equal 12\n\n    [\u003CTestMethod\u003E]\n    let \u0060\u0060with a strike should get the expected score (strike).\u0060\u0060 () =\n        scoreBowls [10;1;2] |\u003E should equal 16\n\n    [\u003CTestMethod\u003E]\n    let \u0060\u0060that is perfect should get a score of 300.\u0060\u0060() =\n        scoreBowls [for i in 1..18 -\u003E 10] |\u003E should equal 300\n\n    [\u003CTestMethod\u003E]\n    let \u0060\u0060with spares in the last frame should get the expected score (spare in last frame).\u0060\u0060 () =\n        scoreBowls ([for i in 1..18 -\u003E 0] @ [2;8;1]) |\u003E should equal 11\n\n    [\u003CTestMethod\u003E]\n    let \u0060\u0060with a strike in the last frame should get the expected score (strike in last frame).\u0060\u0060 () =\n        scoreBowls ([for i in 1..18 -\u003E 0] @ [10;10;1]) |\u003E should equal 21\n\n    [\u003CTestMethod\u003E]\n    let \u0060\u0060with double strikes should add the score of the first strike to the score of the second.\u0060\u0060 () =\n        scoreBowls [10;10;1] |\u003E should equal 33\n\n    [\u003CTestMethod\u003E]\n    let \u0060\u0060that looks like an average bowler\u0027s game should get the expected score (example game).\u0060\u0060 () =\n        scoreBowls [1;4;4;5;6;4;5;5;10;0;1;7;3;6;4;10;2;8;6] |\u003E should equal 133"},{"uri":"https://fsprojects.github.io/FsUnitNUnit.html","title":"FsUnit for NUnit\r\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#r \u0022../packages/NUnit/lib/netstandard2.0/nunit.framework.dll\u0022\n#r \u0022../bin/FsUnit.NUnit/netstandard2.0/FsUnit.NUnit.dll\u0022\n\nopen NUnit.Framework\n(**\nFsUnit for NUnit\n========================\n\n\u003Cdiv class=\u0022row\u0022\u003E\n  \u003Cdiv class=\u0022span1\u0022\u003E\u003C/div\u003E\n  \u003Cdiv class=\u0022span6\u0022\u003E\n    \u003Cdiv class=\u0022well well-small\u0022 id=\u0022nuget\u0022\u003E\n      The FsUnit library for NUnit can be \u003Ca href=\u0022https://nuget.org/packages/FsUnit\u0022\u003Einstalled from NuGet\u003C/a\u003E:\n      \u003Cpre\u003EPM\u003E Install-Package FsUnit\u003C/pre\u003E\n      Sample FsUnit tests for NUnit can be \u003Ca href=\u0022https://nuget.org/packages/FsUnit.Sample\u0022\u003Einstalled from NuGet\u003C/a\u003E:\n      \u003Cpre\u003EPM\u003E Install-Package FsUnit.Sample\u003C/pre\u003E\n    \u003C/div\u003E\n  \u003C/div\u003E\n  \u003Cdiv class=\u0022span1\u0022\u003E\u003C/div\u003E\n\u003C/div\u003E\n\nInitialization\n--------------\n\nIf you reference \u0060FsUnit\u0060 from \u0060NuGet\u0060 and want to use pretty-printed F# value types in error messages, you have to register custom values formatters.\n\n__SetUpFixture__\n\nAdd following piece of code to your assembly to register formatter for namespace or entire assembly\n*)\nopen FsUnit\n\ntype InitMsgUtils() =\n    inherit FSharpCustomMessageFormatter()\n\n(**\n\n\u003E The OneTimeSetUp method in a SetUpFixture is executed once before any of the fixtures contained in its namespace. \n\u003E A SetUpFixture outside of any namespace provides SetUp and TearDown for the entire assembly.\n\nIn F# you can use [namespace global](https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/namespaces#global-namespace) to create \u0060InitMsgUtils\u0060 outside of any namespace.\n\n__SetUp__\n\nAs an alternative solution you can initialize \u0060FSharpCustomMessageFormatter\u0060 for single test fixture from your setup method:\n*)\n\nopen FsUnit\n\n[\u003CTestFixture\u003E]\ntype MyTests () =\n\n    [\u003CSetUp\u003E]\n    member __.setup () =\n        FSharpCustomMessageFormatter() |\u003E ignore\n\n(**\n\nEuler - Problem 1\n-----------------\n*)\nmodule \u0060\u0060Project Euler - Problem 1\u0060\u0060 =\n    open NUnit.Framework\n    open FsUnit\n\n    let GetSumOfMultiplesOf3And5 max =\n        seq{3..max-1} |\u003E Seq.fold(fun acc number -\u003E\n                            (if (number % 3 = 0 || number % 5 = 0) then\n                                acc \u002B number else acc)) 0\n\n    [\u003CTest\u003E]\n    let \u0060\u0060When getting sum of multiples of 3 and 5 to a max number of 10 it should return a sum of 23\u0060\u0060 () =\n        GetSumOfMultiplesOf3And5(10) |\u003E should equal 23\n\n(**\nLightBulb\n---------\n*)\nmodule \u0060\u0060LightBulb Tests\u0060\u0060 =\n    open NUnit.Framework\n    open FsUnit\n\n    type LightBulb(state) =\n        member x.On = state\n        override x.ToString() =\n            match x.On with\n            | true  -\u003E \u0022On\u0022\n            | false -\u003E \u0022Off\u0022\n\n    [\u003CTestFixture\u003E]\n    type \u0060\u0060Given a LightBulb that has had its state set to true\u0060\u0060 ()=\n        let lightBulb = new LightBulb(true)\n\n        [\u003CTest\u003E] member x.\n         \u0060\u0060when I ask whether it is On it answers true.\u0060\u0060 ()=\n                lightBulb.On |\u003E should be True\n\n        [\u003CTest\u003E] member x.\n         \u0060\u0060when I convert it to a string it becomes \u0022On\u0022.\u0060\u0060 ()=\n                string lightBulb |\u003E should equal \u0022On\u0022\n\n    [\u003CTestFixture\u003E]\n    type \u0060\u0060Given a LightBulb that has had its state set to false\u0060\u0060 ()=\n        let lightBulb = new LightBulb(false)\n\n        [\u003CTest\u003E] member x.\n         \u0060\u0060when I ask whether it is On it answers false.\u0060\u0060 ()=\n                lightBulb.On |\u003E should be False\n\n        [\u003CTest\u003E] member x.\n         \u0060\u0060when I convert it to a string it becomes \u0022Off\u0022.\u0060\u0060 ()=\n                string lightBulb |\u003E should equal \u0022Off\u0022\n\n(**\nBowlingGame\n---------\nThanks to \u0060Keith Nicholas\u0060 and \u0060Julian\u0060 from hubFS for this example!\n*)\nmodule \u0060\u0060BowlingGame A game of bowling\u0060\u0060 =\n    open NUnit.Framework\n    open FsUnit\n\n    let (|EndOfGame|IncompleteStrike|Strike|Normal|Other|) (l, frame) =\n        match l with\n        | _ when frame = 11            -\u003E EndOfGame(0)\n        | [10;s]                       -\u003E IncompleteStrike(10\u002Bs\u002Bs)\n        | 10::s::n::tail               -\u003E Strike(10\u002Bs\u002Bn, s::n::tail)\n        |  f::s::n::tail when f\u002Bs = 10 -\u003E Normal(f\u002Bs\u002Bn,  n::tail)\n        |  f::s::n::tail               -\u003E Normal(f\u002Bs,    n::tail)\n        | ls                           -\u003E Other(List.fold (\u002B) 0 ls)\n\n    let scoreBowls bowls =\n        let rec scoreBowls\u0027 frame l current_score =\n            let nextframe = scoreBowls\u0027 (frame\u002B1)\n            match (l, frame) with\n            | EndOfGame(score)        -\u003E current_score \u002B score\n            | IncompleteStrike(score) -\u003E current_score \u002B score\n            | Strike(score, l)        -\u003E nextframe l (current_score \u002B score)\n            | Normal(score, l)        -\u003E nextframe l (current_score \u002B score)\n            | Other(score)            -\u003E current_score \u002B score\n        scoreBowls\u0027 1 bowls 0\n\n    [\u003CTest\u003E]\n    let \u0060\u0060with simple scores should get the expected score.\u0060\u0060 () =\n        scoreBowls [1;2;3] |\u003E should equal 6\n\n    [\u003CTest\u003E]\n    let \u0060\u0060with a spare should get the expected score (spare).\u0060\u0060 () =\n        scoreBowls [2;8;1] |\u003E should equal 12\n\n    [\u003CTest\u003E]\n    let \u0060\u0060with a strike should get the expected score (strike).\u0060\u0060 () =\n        scoreBowls [10;1;2] |\u003E should equal 16\n\n    [\u003CTest\u003E]\n    let \u0060\u0060that is perfect should get a score of 300.\u0060\u0060() =\n        scoreBowls [for i in 1..18 -\u003E 10] |\u003E should equal 300\n\n    [\u003CTest\u003E]\n    let \u0060\u0060with spares in the last frame should get the expected score (spare in last frame).\u0060\u0060 () =\n        scoreBowls ([for i in 1..18 -\u003E 0] @ [2;8;1]) |\u003E should equal 11\n\n    [\u003CTest\u003E]\n    let \u0060\u0060with a strike in the last frame should get the expected score (strike in last frame).\u0060\u0060 () =\n        scoreBowls ([for i in 1..18 -\u003E 0] @ [10;10;1]) |\u003E should equal 21\n\n    [\u003CTest\u003E]\n    let \u0060\u0060with double strikes should add the score of the first strike to the score of the second.\u0060\u0060 () =\n        scoreBowls [10;10;1] |\u003E should equal 33\n\n    [\u003CTest\u003E]\n    let \u0060\u0060that looks like an average bowler\u0027s game should get the expected score (example game).\u0060\u0060 () =\n        scoreBowls [1;4;4;5;6;4;5;5;10;0;1;7;3;6;4;10;2;8;6] |\u003E should equal 133\n\n(**\nNote: NUnit can also be utilized without specifying a type as in the examples for xUnit\n*)"},{"uri":"https://fsprojects.github.io/FsUnitoperators.html","title":"Operators comparison across frameworks\r\n","content":"Operators comparison across frameworks\r\n======================================\r\n\r\n| Operator               | NUnit | xUnit | MSTest |\r\n|------------------------|:-----:|:-----:|:------:|\r\n| \u0060Null\u0060                 | \u2714     | \u2714     | \u2714     |\r\n| \u0060Empty\u0060                | \u2714     | \u2714     | \u2714     |\r\n| \u0060EmptyString\u0060          | \u2714     | \u2714     | \u2714     |\r\n| \u0060NullOrEmptyString\u0060    | \u2714     | \u2714     | \u2714     |\r\n| \u0060True\u0060                 | \u2714     | \u2714     | \u2714     |\r\n| \u0060False\u0060                | \u2714     | \u2714     | \u2714     |\r\n| \u0060NaN\u0060                  | \u2714     | \u2714     | \u2714     |\r\n| \u0060unique\u0060               | \u2714     | \u2714     | \u2714     |\r\n| \u0060should\u0060               | \u2714     | \u2714     | \u2714     |\r\n| \u0060equal\u0060                | \u2714     | \u2714     | \u2714     |\r\n| \u0060equivalent\u0060           | \u2714     | \u274C    | \u2714     |\r\n| \u0060equalWithin\u0060          | \u2714     | \u2714     | \u2714     |\r\n| \u0060contain\u0060              | \u2714     | \u2714     | \u2714     |\r\n| \u0060haveLength\u0060           | \u2714     | \u2714     | \u2714     |\r\n| \u0060haveCount\u0060            | \u2714     | \u2714     | \u2714     |\r\n| \u0060be\u0060                   | \u2714     | \u2714     | \u2714     |\r\n| \u0060sameAs\u0060               | \u2714     | \u2714     | \u2714     |\r\n| \u0060throw\u0060                | \u2714     | \u2714     | \u2714     |\r\n| \u0060throwWithMessage\u0060     | \u2714     | \u2714     | \u2714     |\r\n| \u0060greaterThan\u0060          | \u2714     | \u2714     | \u2714     |\r\n| \u0060greaterThanOrEqualTo\u0060 | \u2714     | \u2714     | \u2714     |\r\n| \u0060lessThan\u0060             | \u2714     | \u2714     | \u2714     |\r\n| \u0060lessThanOrEqualTo\u0060    | \u2714     | \u2714     | \u2714     |\r\n| \u0060shouldFail\u0060           | \u2714     | \u2714     | \u2714     |\r\n| \u0060endWith\u0060              | \u2714     | \u2714     | \u2714     |\r\n| \u0060startWith\u0060            | \u2714     | \u2714     | \u2714     |\r\n| \u0060haveSubstring\u0060        | \u2714     | \u2714     | \u2714     |\r\n| \u0060ofExactType\u0060          | \u2714     | \u2714     | \u2714     |\r\n| \u0060instanceOfType\u0060       | \u2714     | \u2714     | \u2714     |\r\n| \u0060choice\u0060               | \u274C    | \u2714     | \u2714     |\r\n| \u0060ascending\u0060            | \u2714     | \u2714     | \u2714     |\r\n| \u0060descending\u0060           | \u2714     | \u2714     | \u2714     |\r\n| \u0060not\u0027\u0060                 | \u2714     | \u2714     | \u2714     |\r\n| \u0060matchList\u0060            | \u274C    | \u2714     | \u2714     |\r\n| \u0060inRange\u0060              | \u2714     | \u2714     | \u2714     |\r\n| \u0060ofCase\u0060               | \u2714     | \u2714     | \u2714     |\r\n| \u0060supersetOf\u0060           | \u2714     | \u2714     | \u2714     |\r\n| \u0060subsetOf\u0060             | \u2714     | \u2714     | \u2714     |"},{"uri":"https://fsprojects.github.io/FsUnitxUnit.html","title":"FsUnit for xUnit\r\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#r \u0022../packages/xunit.extensibility.core/lib/netstandard1.1/xunit.core.dll\u0022\n#r \u0022../packages/NHamcrest/lib/netstandard1.5/NHamcrest.dll\u0022\n#r \u0022../bin/FsUnit.Xunit/netstandard2.0/FsUnit.Xunit.dll\u0022\n\n(**\nFsUnit for xUnit\n========================\n\n\u003Cdiv class=\u0022row\u0022\u003E\n  \u003Cdiv class=\u0022span1\u0022\u003E\u003C/div\u003E\n  \u003Cdiv class=\u0022span6\u0022\u003E\n    \u003Cdiv class=\u0022well well-small\u0022 id=\u0022nuget\u0022\u003E\n      The FsUnit library for xUnit can be \u003Ca href=\u0022https://nuget.org/packages/FsUnit.xUnit\u0022\u003Einstalled from NuGet\u003C/a\u003E:\n      \u003Cpre\u003EPM\u003E Install-Package FsUnit.xUnit\u003C/pre\u003E\n      Sample FsUnit tests for xUnit can be \u003Ca href=\u0022https://nuget.org/packages/FsUnit.xUnit.Sample\u0022\u003Einstalled from NuGet\u003C/a\u003E:\n      \u003Cpre\u003EPM\u003E Install-Package FsUnit.xUnit.Sample\u003C/pre\u003E\n    \u003C/div\u003E\n  \u003C/div\u003E\n  \u003Cdiv class=\u0022span1\u0022\u003E\u003C/div\u003E\n\u003C/div\u003E\n\nEuler - Problem 1\n-----------------\n*)\nmodule \u0060\u0060Project Euler - Problem 1\u0060\u0060 =\n    open Xunit\n    open FsUnit.Xunit\n\n    let GetSumOfMultiplesOf3And5 max =\n        seq{3..max-1} |\u003E Seq.fold(fun acc number -\u003E\n                            (if (number % 3 = 0 || number % 5 = 0) then\n                                acc \u002B number else acc)) 0\n\n    [\u003CFact\u003E]\n    let \u0060\u0060When getting sum of multiples of 3 and 5 to a max number of 10 it should return a sum of 23\u0060\u0060 () =\n        GetSumOfMultiplesOf3And5(10) |\u003E should equal 23\n\n(**\nLightBulb\n---------\n*)\nmodule \u0060\u0060LightBulb Tests\u0060\u0060 =\n    open Xunit\n    open FsUnit.Xunit\n\n    type LightBulb(state) =\n        member x.On = state\n        override x.ToString() =\n            match x.On with\n            | true  -\u003E \u0022On\u0022\n            | false -\u003E \u0022Off\u0022\n\n    type \u0060\u0060Given a LightBulb that has had its state set to true\u0060\u0060 ()=\n        let lightBulb = new LightBulb(true)\n\n        [\u003CFact\u003E] member x.\n         \u0060\u0060when I ask whether it is On it answers true.\u0060\u0060 ()=\n                lightBulb.On |\u003E should be True\n\n        [\u003CFact\u003E] member x.\n         \u0060\u0060when I convert it to a string it becomes \u0022On\u0022.\u0060\u0060 ()=\n                string lightBulb |\u003E should equal \u0022On\u0022\n\n    type \u0060\u0060Given a LightBulb that has had its state set to false\u0060\u0060 ()=\n        let lightBulb = new LightBulb(false)\n\n        [\u003CFact\u003E] member x.\n         \u0060\u0060when I ask whether it is On it answers false.\u0060\u0060 ()=\n                lightBulb.On |\u003E should be False\n\n        [\u003CFact\u003E] member x.\n         \u0060\u0060when I convert it to a string it becomes \u0022Off\u0022.\u0060\u0060 ()=\n                string lightBulb |\u003E should equal \u0022Off\u0022\n\n\n(**\nBowlingGame\n---------\nThanks to \u0060Keith Nicholas\u0060 and \u0060Julian\u0060 from hubFS for this example!\n*)\nmodule \u0060\u0060BowlingGame A game of bowling\u0060\u0060 =\n    open Xunit\n    open FsUnit.Xunit\n\n    let (|EndOfGame|IncompleteStrike|Strike|Normal|Other|) (l, frame) =\n        match l with\n        | _ when frame = 11            -\u003E EndOfGame(0)\n        | [10;s]                       -\u003E IncompleteStrike(10\u002Bs\u002Bs)\n        | 10::s::n::tail               -\u003E Strike(10\u002Bs\u002Bn, s::n::tail)\n        |  f::s::n::tail when f\u002Bs = 10 -\u003E Normal(f\u002Bs\u002Bn,  n::tail)\n        |  f::s::n::tail               -\u003E Normal(f\u002Bs,    n::tail)\n        | ls                           -\u003E Other(List.fold (\u002B) 0 ls)\n\n    let scoreBowls bowls =\n        let rec scoreBowls\u0027 frame l current_score =\n            let nextframe = scoreBowls\u0027 (frame\u002B1)\n            match (l, frame) with\n            | EndOfGame(score)        -\u003E current_score \u002B score\n            | IncompleteStrike(score) -\u003E current_score \u002B score\n            | Strike(score, l)        -\u003E nextframe l (current_score \u002B score)\n            | Normal(score, l)        -\u003E nextframe l (current_score \u002B score)\n            | Other(score)            -\u003E current_score \u002B score\n        scoreBowls\u0027 1 bowls 0\n\n    [\u003CFact\u003E]\n    let \u0060\u0060with simple scores should get the expected score.\u0060\u0060 () =\n        scoreBowls [1;2;3] |\u003E should equal 6\n\n    [\u003CFact\u003E]\n    let \u0060\u0060with a spare should get the expected score (spare).\u0060\u0060 () =\n        scoreBowls [2;8;1] |\u003E should equal 12\n\n    [\u003CFact\u003E]\n    let \u0060\u0060with a strike should get the expected score (strike).\u0060\u0060 () =\n        scoreBowls [10;1;2] |\u003E should equal 16\n\n    [\u003CFact\u003E]\n    let \u0060\u0060that is perfect should get a score of 300.\u0060\u0060() =\n        scoreBowls [for i in 1..18 -\u003E 10] |\u003E should equal 300\n\n    [\u003CFact\u003E]\n    let \u0060\u0060with spares in the last frame should get the expected score (spare in last frame).\u0060\u0060 () =\n        scoreBowls ([for i in 1..18 -\u003E 0] @ [2;8;1]) |\u003E should equal 11\n\n    [\u003CFact\u003E]\n    let \u0060\u0060with a strike in the last frame should get the expected score (strike in last frame).\u0060\u0060 () =\n        scoreBowls ([for i in 1..18 -\u003E 0] @ [10;10;1]) |\u003E should equal 21\n\n    [\u003CFact\u003E]\n    let \u0060\u0060with double strikes should add the score of the first strike to the score of the second.\u0060\u0060 () =\n        scoreBowls [10;10;1] |\u003E should equal 33\n\n    [\u003CFact\u003E]\n    let \u0060\u0060that looks like an average bowler\u0027s game should get the expected score (example game).\u0060\u0060 () =\n        scoreBowls [1;4;4;5;6;4;5;5;10;0;1;7;3;6;4;10;2;8;6] |\u003E should equal 133"}]